import discord
import re
import tracecback
from discord.ext import commands
from discord.ext.commands import has_permissions, MissingPermissions
from discord.utils import get
from discord import Intents
import regex
import aiohttp
import os
import random
import logging
import json
import asyncio
import typing
import bs4
import requests
import traceback
import sys
import datetime
from datetime import date
from datetime import timedelta
from bs4 import BeautifulSoup
import sqlite3
TOKEN = 'NzE5NzI3NjIyNzgyODQ1MDMx.Xv1DgQ.mlAW3cOZSCqOFiSgkXx1ALQeEQc'
intentss = Intents.all()
def get_prefix(bot, message):
    with open('prefixes.json', 'r') as f:
        prefixes = json.load(f)
    if str(message.guild.id) in prefixes:
        return prefixes[str(message.guild.id)]
    else: 
        return '-'

bot = commands.Bot(command_prefix=get_prefix,intents = intentss, case_insensitive=True, activity=discord.Game(name="Bot back up - maintanance issue | Developed by nope#8182"))
bot.remove_command('help')
bot.launch_time = datetime.datetime.utcnow()
initial_extensions = ['cogs.moderation',
                      'cogs.stock',
                      'cogs.audio'
                     ]



logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)



if __name__ == '__main__':
    for extension in initial_extensions:
        bot.load_extension(extension)
    bot.load_extension('jishaku')
    print('All cogs have been loaded!')

@bot.command()
@commands.is_owner()
async def randomfact(ctx):
    async with aiohttp.ClientSession() as session:
        async with session.get('https://uselessfacts.jsph.pl/random.json?language=en') as r:
            res = await r.json()
            await ctx.send(res['text'])

@bot.event()
async def on_command_error(self, ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(color=discord.Color.red())
        embed.set_author(name='Error Occured!')
        embed.add_field(name='
@bot.command()
async def mcskin(ctx, username):
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api.mojang.com/users/profiles/minecraft/{username}') as r:
            res = await r.json()
            embed = discord.Embed(colour=discord.Colour.blue())
            embed.set_author(name=f"{username}'s Skin")
            embed.set_image(url=f"https://crafatar.com/renders/body/{res['id']}")
            await ctx.send(embed=embed)




@bot.command()
@commands.is_owner()
async def gstart(ctx):
    await ctx.send('What is the prize for this giveaway? (reply "cancel" at any time to cancel the command)')
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel
    prize = await bot.wait_for('message', check=check)
    if prize.content == 'cancel':
        await ctx.send(':white_check_mark:, cancelled the command.')
        return
    await ctx.send('What is the channel you would like to send the giveaway in?')
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel
    channel = await bot.wait_for('message', check=check)
    if channel.content == 'cancel':
        await ctx.send(':white_check_mark:, cancelled the command.')
        return
    await ctx.send('How long do you want this giveaway to be?')
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel
    time = await bot.wait_for('message', check=check)
    if time.content == 'cancel':
        await ctx.send(':white_check_mark:, cancelled the command.')
        return
    await ctx.send('How many winners would you like to win?')
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel
    winnernum = await bot.wait_for('message', check=check)
    await ctx.send("Please post an invite of a server the giveaway members have to be in, if you don't want this option, type 'None'.")
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel
    invite = await bot.wait_for('message', check=check)
    if prize.content == 'cancel':
        await ctx.send(':white_check_mark:, cancelled the command.')
        return
    await ctx.send('What role/ping would you like to use? If no ping, please reply with "None". Please post a role ID or everyone, or here, for the respective pings.')
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel
    theping = await bot.wait_for('message', check=check)
    if theping =='cancel':
        await ctx.send(':white_check_mark:, cancelled the command.')
        return

    typetime = time.content[-1]
    time = int(time.content[:-1])

    nowtime = datetime.datetime.utcnow()
    if typetime == "h" or typetime == "hours":
        timeout_date = nowtime + timedelta(hours=time)
    elif typetime == "m" or typetime == "minutes":
        timeout_date = nowtime + timedelta(minutes=time)
    elif typetime == "w" or typetime == "weeks":
        timeout_date = nowtime + timedelta(weeks=time)
    elif typetime == "s" or typetime == "seconds":
        timeout_date = nowtime + timedelta(seconds=time)
    elif typetime == "d" or typetime == "days":
        timeout_date = nowtime + timedelta(days=time)
    embed = discord.Embed(timestamp=timeout_date, colour = discord.Colour.blue())
    embed.set_author(name='New Giveaway')
    embed.add_field(name='Prize:', value=prize.content)
    embed.add_field(name='Number of winners:', value=winnernum.content)
    embed.set_footer(text='Ends at:')
    if invite.content == 'None':
        jj = 1
    else:
        invite1 = await bot.fetch_invite(invite.content)
        guildid = invite1.guild.id
        guildnew = bot.get_guild(guildid)
        guildname = guildnew.name
        embed.add_field(name='Must be in:', value=f'[{guildname}]({invite1.url})')
    for channel in channel.channel_mentions:
        givemessage = await channel.send(embed=embed)
        if theping.content != 'None':
            if theping.content == 'everyone':
                await channel.send('@everyone')
            elif theping.content == 'here':
                await channel.send('@here')
            else:
                await channel.send(f'<@&{theping.content}>')
        await givemessage.add_reaction('\U0001f389')
    while True:
        if invite.content == 'None':
            timeout = timeout_date - datetime.datetime.utcnow()
            timeout = timeout.total_seconds()
            givemessage = await channel.fetch_message(givemessage.id)
            guild = ctx.guild
            messaged = set()
            nitrorole = guild.get_role(747088018632081464)
            def check(reaction, user):
                return reaction.message == givemessage and user not in messaged and user != guild.me
            try:    
                reaction, user = await bot.wait_for('reaction_add', check=check, timeout=timeout)
                try:
                    await user.send('You have successfully registered for this giveaway.')
                except discord.errors.Forbidden:
                    jj = 1
            except asyncio.TimeoutError:
                users = await reaction.users().flatten()
                users.remove(guild.me)
                winner = random.choice(users)
                await channel.send(f'Congratulations, {winner.mention}, you have won.')
                embed = discord.Embed(colour = discord.Colour.blue())
                embed.set_author(name='New Giveaway')
                embed.add_field(name='Prize:', value=prize.content)
                embed.add_field(name='Number of winners:', value=winnernum.content)
                embed.set_footer(text='Giveaway Ended')
                await givemessage.edit(embed=embed)
                return
        else:
            guildid = invite1.guild.id
            timeout = timeout_date - datetime.datetime.utcnow()
            timeout = timeout.total_seconds()
            givemessage = await channel.fetch_message(givemessage.id)
            guild = ctx.guild
            guildnew = bot.get_guild(guildid)
            messaged = set()
            nitrorole = guild.get_role(747088018632081464)
            def check(reaction, user):
                return reaction.message == givemessage and user not in messaged
            try:    
                reaction, user = await bot.wait_for('reaction_add', check=check, timeout=timeout)
                if guildnew.get_member(user.id):
                    try:
                        await user.send('You have successfully registered for this giveaway.')
                    except discord.errors.Forbidden:
                        jj = 1                 
                elif nitrorole in user.roles:
                    try:
                        await user.send('You have successfully registered and bypassed requirements for this giveaway')
                    except discord.errors.Forbidden:
                        jj = 1
                else:
                    try:
                        await user.send("You're not in the server, please join and react again.")
                    except discord.errors.Forbidden:
                        jj = 1
                    member = guild.get_member(user.id)
                    await givemessage.remove_reaction(reaction, member)

            except asyncio.TimeoutError:
                users = await reaction.users().flatten()
                users.remove(guild.me)
                winner = random.choice(users)
                await channel.send(f'Congratulations, {winner.mention}, you have won.')
                embed = discord.Embed(colour = discord.Colour.blue())
                embed.set_author(name='New Giveaway')
                embed.add_field(name='Prize:', value=prize.content)
                embed.add_field(name='Number of winners:', value=winnernum.content)
                embed.set_footer(text='Giveaway Ended')
                await givemessage.edit(embed=embed)
                return


@bot.command()
@commands.is_owner() 
async def reload(ctx, extension):
    try:
        bot.reload_extension(f'cogs.{extension}')
        await ctx.send(f'Reloaded {extension}.')
    except Exception as e:
        await ctx.send(f'Error:{e}')




@bot.command() 
@commands.is_owner()
async def reloadall(self, ctx):
    for file in os.listdir("cogs"): 
        if file.endswith(".py"):
            name = file[:-3]
            try:
                bot.reload_extension(f'cogs.{name}')
                await ctx.send(f'Reloaded {name}.')
            except Exception as e:
                await ctx.send(f'Error: {e}')

@bot.event
async def on_ready():
    print('Running.')

@bot.event
async def on_guild_join(guild):
    with open('prefixes.json', 'r') as f: 
        prefixes = json.load(f)
    prefixes[str(guild.id)] = '-'
    with open ('prefixes.json','w') as f:
        json.dump(prefixes, f, indent=4)


@bot.command()
async def uptime(ctx):
    delta_uptime = datetime.datetime.utcnow() - bot.launch_time
    hours, remainder = divmod(int(delta_uptime.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    days, hours = divmod(hours, 24)
    await ctx.send(f"I have been online for: {days} days, {hours} hours, {minutes} minutes, {seconds} seconds.")






@bot.event
async def on_guild_remove(guild):
    with open('prefixes.json', 'r') as f:
        prefixes = json.load(f)
 
    prefixes.pop(str(guild.id))

    with open('prefixes.json', 'w') as f:
        json.dump(prefixes, f, indent=4)

@bot.command()
async def servers(ctx):
    if ctx.author.id == 713979128969429012:
        await ctx.send(f':white_check_mark: {ctx.author.mention}, please check terminal or your direct messages.')
        for guild in bot.guilds:
            await ctx.author.send(guild.name)
            print(guild.name)
    else:
        await ctx.send(f':x: {ctx.author.mention}, for privacy reasons only the bot owner may see a list of servers, for a total count of servers, the number is {len(bot.guilds)}')
@bot.command()
@commands.check_any(commands.is_owner(), commands.has_permissions(administrator=True))
async def prefix(ctx, prefix = None):
    if prefix == None:
        with open('prefixes.json', 'r') as f:
            prefixes = json.load(f)
        if str(ctx.guild.id) in prefixes:
            await ctx.send(f"{ctx.guild.name}'s prefix is: {prefixes[str(ctx.guild.id)]}.")
        else:
            await ctx.send(f"{ctx.guild.name}'s prefix is: -.")
    else:
        with open('prefixes.json', 'r') as f:
            prefixes = json.load(f)
        prefixes[str(ctx.guild.id)] = prefix
        with open('prefixes.json', 'w') as f:
            json.dump(prefixes, f, indent=4) 
        await ctx.send(f'Updated the prefix to {prefix}.')

@bot.event
async def on_message(message):
    await bot.process_commands(message)
    if re.search(rf'^<@!?719727622782845031>$', message.content):       
        with open('prefixes.json', 'r') as f:
            prefixes = json.load(f)
        if str(message.guild.id) in prefixes:
            await message.channel.send(f"{message.author.mention} my prefix in this server is: {prefixes[str(message.guild.id)]}.")
        else:
            await message.channel.send(f"{message.author.mention} my prefix in this server is: -.")
 

       
@bot.group(name='help', invoke_without_command=True)
async def help_cmd(ctx):
    embed = discord.Embed(colour=discord.Colour.blue()) 
    embed.set_author(name='BigBot Help')
    embed.add_field(name='Moderation:', value='Type -help moderation to find all moderation commands.') 
    embed.add_field(name='Fun', value='Type -help fun to find all fun commands.')
    embed.add_field(name='Stocks', value='Type -help stocks to find all the stocks commands.')
    embed.add_field(name='Prefix Help:', value='Default prefix: - , change using -prefix (prefix) command')
    embed.add_field(name='Support Server:', value='[Click Here!](https://nopebots.tech/discord)')
    embed.add_field(name='Number of servers:', value=len(bot.guilds))
    embed.set_footer(text='Developed by nope#8182')
    await ctx.channel.send(embed=embed)


@help_cmd.command(name='moderation')
async def mod_sub(ctx):
    embed = discord.Embed(colour=discord.Colour.blue())
    embed.set_author(name='Moderation Help')
    embed.add_field(name='Warn', value='Warns the specified user.')
    embed.add_field(name='Ban', value='Bans the specified user.')
    embed.add_field(name='Kick', value='Kicks the specified user.')
    embed.add_field(name='Mute', value='Mutes the specified user for the specified time or until the unmute command is ran.')
    embed.add_field(name='Unmute', value='Unmutes the specified user.')
    embed.add_field(name='Purge', value='Purges or deletes the specified amount of messages from the channel.')
    embed.add_field(name='Lock', value='Locks the channel for a specified amount of time, or until the unlock command is run.')
    embed.add_field(name='Unlock', value='Unlocks the channel.')
    embed.add_field(name='Setchannel', value='Sets the message edit/delete log channel.')
    await ctx.send(embed=embed)
    



@help_cmd.command(name='fun')
async def fun_sub(ctx):
    embed = discord.Embed(colour=discord.Colour.blue())
    embed.set_author(name='Fun Commands Help')
    embed.add_field(name='Meme:', value='Pulls a random meme from the r/memes subreddit.', inline=False)
    embed.add_field(name='Dankmeme:', value='Pulls a random dank meme from the r/dankmemes subreddit.', inline=False)
    embed.add_field(name='Begin:', value='Begins an Among Us game, servermutes everyone in the VC the command author is in.', inline=False)
    embed.add_field(name='End', value='Ends an Among Us game, un-servermutes everyone in the VC.', inline=False)
    await ctx.send(embed=embed)
    

@help_cmd.command(name='stocks', alias='stock')
async def stock_sub(ctx):
    embed = discord.Embed(colour=discord.Colour.blue())
    embed.set_author(name='Stock Commands Help')
    embed.add_field(name='Info', value='Pulls basic info on the stock, for more complicated info, see "more".', inline=False)
    embed.add_field(name='More', value='Pulls more complicated info on the stock.', inline=False)
    await ctx.send(embed=embed)




    

bot.run(TOKEN)
